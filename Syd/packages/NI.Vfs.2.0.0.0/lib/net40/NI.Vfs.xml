<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NI.Vfs</name>
    </assembly>
    <members>
        <member name="T:NI.Vfs.AllFileSelector">
            <summary>
            A IFileSelector that selects all files
            </summary>
        </member>
        <member name="T:NI.Vfs.IFileSelector">
            <summary>
            This interface is used to select files when traversing a file hierarchy.
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileSelector.IncludeFile(NI.Vfs.IFileObject)">
            <summary>
            Determines if a file or folder should be selected.  
            This method is called in depthwise order (that is, it is called for the children of a folder before it is called for the folder itself).
            </summary>
            <param name="file">the file or folder to select</param>
            <returns>true if the file should be selected.</returns>
        </member>
        <member name="M:NI.Vfs.IFileSelector.TraverseDescendents(NI.Vfs.IFileObject)">
            <summary>
            Determines whether a folder should be traversed.  If this method returns true <see cref="M:NI.Vfs.IFileSelector.IncludeFile(NI.Vfs.IFileObject)"/>
            is called for each of the children of the folder, and each of the child folders is recursively traversed.
            </summary>
            <param name="file">the file or folder to select.</param>
            <returns>true if the folder should be traversed.</returns>
        </member>
        <member name="T:NI.Vfs.FileObjectExt">
            <summary>
            Extension methods for <see cref="T:NI.Vfs.IFileObject"/> interface
            </summary>
        </member>
        <member name="M:NI.Vfs.FileObjectExt.ReadAllBytes(NI.Vfs.IFileObject)">
            <summary>
            Reads the contents of the file into a byte array
            </summary>
            <param name="file">IFileObject instance</param>
            <returns>A byte array containing the contents of the file</returns>
        </member>
        <member name="M:NI.Vfs.FileObjectExt.WriteAllBytes(NI.Vfs.IFileObject,System.Byte[])">
            <summary>
            Writes the specified byte array to the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="file">IFileObject instance</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:NI.Vfs.FileObjectExt.ReadAllText(NI.Vfs.IFileObject)">
            <summary>
            Reads all lines of the text file
            </summary>
            <param name="file">IFileObject instance</param>
            <returns>A string containing all lines of the file.</returns>
        </member>
        <member name="M:NI.Vfs.FileObjectExt.WriteAllText(NI.Vfs.IFileObject,System.String)">
            <summary>
            Writes the specified string to the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="file">IFileObject instance</param>
            <param name="text">The string to write to the file.</param>
        </member>
        <member name="T:NI.Vfs.ExtensionFileSelector">
            <summary>
            A IFileSelector that selects files by explicit list of extensions
            </summary>
        </member>
        <member name="T:NI.Vfs.FileSystemException">
            <summary>
            File system exception
            </summary>
        </member>
        <member name="T:NI.Vfs.FileObjectEventArgs">
            <summary>
            File event arguments
            </summary>
        </member>
        <member name="P:NI.Vfs.FileObjectEventArgs.File">
            <summary>
            Context <see cref="T:NI.Vfs.IFileObject"/> instance
            </summary>
        </member>
        <member name="T:NI.Vfs.FileObjectCreateEventArgs">
            <summary>
            File create event arguments
            </summary>
        </member>
        <member name="P:NI.Vfs.FileObjectCreateEventArgs.Type">
            <summary>
            Type of the file being created
            </summary>
        </member>
        <member name="T:NI.Vfs.FileObjectMoveEventArgs">
            <summary>
            File move event arguments
            </summary>
        </member>
        <member name="P:NI.Vfs.FileObjectMoveEventArgs.Destination">
            <summary>
            Represents move destination <see cref="T:NI.Vfs.IFileObject"/> instance
            </summary>
        </member>
        <member name="T:NI.Vfs.FileObjectCopyEventArgs">
            <summary>
            File copy event arguments
            </summary>
        </member>
        <member name="P:NI.Vfs.FileObjectCopyEventArgs.Source">
            <summary>
            Represents copy from source <see cref="T:NI.Vfs.IFileObject"/> instance
            </summary>
        </member>
        <member name="T:NI.Vfs.FileObjectOpenEventArgs">
            <summary>
            File open event arguments
            </summary>
        </member>
        <member name="T:NI.Vfs.IFileContent">
            <summary>
            Represents the data content of a file.
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileContent.GetStream(System.IO.FileAccess)">
            <summary>
            Returns a stream for reading or writing the file's content.
            </summary>
            <param name="access">file access type (read or write).</param>
            <remarks>Note that access type <see cref="F:System.IO.FileAccess.ReadWrite"/> option may not be supported by some implementations.</remarks>
            <returns>An stream to read or write the file's content.</returns>
        </member>
        <member name="M:NI.Vfs.IFileContent.Close">
            <summary>
            Closes all resources used by the content, including any open stream.
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileContent.File">
            <summary>
            Returns the file which this is the content of.
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileContent.Size">
            <summary>
            Determines the size of the file, in bytes.
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileContent.LastModifiedTime">
            <summary>
            Get or set the last-modified timestamp of the file.
            </summary>
        </member>
        <member name="T:NI.Vfs.IFileObject">
            <summary>
            Represents a file, and is used to access the content and structure of the file. 
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.Close">
            <summary>
            Closes this file, and its content. This method is a hint to the
            implementation that it can release any resources asociated with the file. 
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.CopyFrom(NI.Vfs.IFileObject)">
            <summary>
            Copies another file, and all its descendents, to this file
            </summary>
            <remarks>
            Copies another file, and all its descendents, to this file. 
            If this file does not exist, it is created. Its parent folder is also created, if necessary.
            If this file does exist, it is deleted first. 
            This method is not transactional. If it fails and throws an exception, this file will potentially only be partially copied. 
            </remarks>
            <param name="srcFile">The source file to copy</param>
        </member>
        <member name="M:NI.Vfs.IFileObject.CopyFrom(System.IO.Stream)">
            <summary>
            Copies data to this file
            </summary>
            <remarks>
            If this file does not exist, it is created.
            If this file does exist, it is deleted first.
            </remarks>
            <param name="data">data input stream</param>
        </member>
        <member name="M:NI.Vfs.IFileObject.CreateFile">
            <summary>
            Creates this file, if it does not exist. Also creates any ancestor folders
            which do not exist. This method does nothing if the file already exists and
            is a file. 
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.CreateFolder">
            <summary>
            Creates this folder, if it does not exist. Also creates any ancestor folders
            which do not exist. This method does nothing if the folder already exists.
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.Delete">
            <summary>
            Deletes this file.
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.Exists">
            <summary>
            Determines if this file exists.
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.GetChildren">
            <summary>
            Lists the children of this file. 
            </summary>
            <returns>
            An array containing the children of this file. The array is unordered. If the
            file does not have any children, a zero-length array is returned. This method
            never returns null.
            </returns>
        </member>
        <member name="M:NI.Vfs.IFileObject.FindFiles(NI.Vfs.IFileSelector)">
            <summary>
            Finds the set of matching descendents of this file, in depthwise order.
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileObject.MoveTo(NI.Vfs.IFileObject)">
            <summary>
            Move this file.
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileObject.Name">
            <summary>
            Returns the name of this file.
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileObject.Type">
            <summary>
            Returns this file's type. 
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileObject.Parent">
            <summary>
            Returns the folder that contains this file.
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileObject.Content">
            <summary>
            Returns this file's content.
            </summary>
        </member>
        <member name="T:NI.Vfs.IFileSystem">
            <summary>
            </summary>
        </member>
        <member name="M:NI.Vfs.IFileSystem.ResolveFile(System.String)">
            <summary>
            Finds a file in this file system. 
            </summary>
        </member>
        <member name="P:NI.Vfs.IFileSystem.Root">
            <summary>
            Returns the root file of this file system. 
            </summary>
        </member>
        <member name="T:NI.Vfs.ListFileSelector">
            <summary>
            A IFileSelector that selects files by explicit list of names 
            </summary>
        </member>
        <member name="T:NI.Vfs.LocalFile">
            <summary>
            A file object implementation which uses direct file access. 
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFile.Close">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.Close"/>
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFile.CopyFrom(NI.Vfs.IFileObject)">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.CopyFrom(NI.Vfs.IFileObject)"/>
            </summary>		
        </member>
        <member name="M:NI.Vfs.LocalFile.CopyFrom(NI.Vfs.IFileObject[])">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.CopyFrom(NI.Vfs.IFileObject)"/>
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFile.CopyFrom(System.IO.Stream)">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.CopyFrom(NI.Vfs.IFileObject)"/>
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFile.MoveTo(NI.Vfs.IFileObject)">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.MoveTo(NI.Vfs.IFileObject)"/>
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFile.CreateFile">
            <summary>
            Creates this file, if it does not exist. Also creates any ancestor folders
            which do not exist. This method throws IOException if this file or folder already exists        
            </summary>		
        </member>
        <member name="M:NI.Vfs.LocalFile.CreateFolder">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.CreateFolder"/>
            </summary>			
        </member>
        <member name="M:NI.Vfs.LocalFile.Delete">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.Delete"/>
            </summary>		
        </member>
        <member name="M:NI.Vfs.LocalFile.Exists">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.Exists"/>
            </summary>		
        </member>
        <member name="M:NI.Vfs.LocalFile.FindFiles(NI.Vfs.IFileSelector)">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.FindFiles(NI.Vfs.IFileSelector)"/>
            </summary>		
        </member>
        <member name="P:NI.Vfs.LocalFile.Content">
            <summary>
            <see cref="!:IFileObject.GetContent"/>
            </summary>		
        </member>
        <member name="T:NI.Vfs.LocalFileContent">
            <summary>
            The content of a local file. 
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFileContent.GetStream(System.IO.FileAccess)">
            <summary>
            <see cref="M:NI.Vfs.IFileContent.GetStream(System.IO.FileAccess)"/>
            </summary>
        </member>
        <member name="M:NI.Vfs.LocalFileContent.Close">
            <summary>
            <see cref="M:NI.Vfs.IFileContent.Close"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NI.Vfs.LocalFileContent.File" -->
        <member name="P:NI.Vfs.LocalFileContent.Size">
            <summary>
            <see cref="P:NI.Vfs.IFileContent.Size"/>
            </summary>
        </member>
        <member name="P:NI.Vfs.LocalFileContent.LastModifiedTime">
            <summary>
            <see cref="P:NI.Vfs.IFileContent.LastModifiedTime"/>
            </summary>
        </member>
        <member name="T:NI.Vfs.LocalFileSystem">
            <summary>
            Local file system component
            </summary>
        </member>
        <member name="P:NI.Vfs.LocalFileSystem.RootFolder">
            <summary>
            Get or set root folder for this instance of local filesystem
            </summary>
        </member>
        <member name="P:NI.Vfs.LocalFileSystem.ReadOnly">
            <summary>
            Get or set read only mode flag
            </summary>
            <remarks>
            When ReadOnly is true file system will allow only 'read' operations.
            </remarks>
        </member>
        <member name="P:NI.Vfs.LocalFileSystem.CopyBufferLength">
            <summary>
            Get or set buffer length used when copying file
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Creating">
            <summary>
            Occurs before file or folder creation.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Created">
            <summary>
            Occurs after file or folder creation.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Deleting">
            <summary>
            Occurs before file or folder deletion.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Deleted">
            <summary>
            Occurs after file or folder deletion.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Moving">
            <summary>
            Occurs before file or folder moving.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Moved">
            <summary>
            Occurs after file or folder moving.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Copying">
            <summary>
            Occurs before file or folder copy from another <see cref="T:NI.Vfs.IFileObject"/>.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Copied">
            <summary>
            Occurs after file or folder copy from another <see cref="T:NI.Vfs.IFileObject"/>.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Open">
            <summary>
            Occurs during file stream opening.
            </summary>
        </member>
        <member name="E:NI.Vfs.LocalFileSystem.Error">
            <summary>
            Occurs when any file error.
            </summary>
        </member>
        <member name="T:NI.Vfs.MaskFileSelector">
            <summary>
            A IFileSelector that selects files by given mask
            </summary>
        </member>
        <member name="T:NI.Vfs.MemoryFile">
            <summary>
            A file object implementation which uses in-memory file access
            </summary>
        </member>
        <member name="M:NI.Vfs.MemoryFile.MoveTo(NI.Vfs.IFileObject)">
            <summary>
            <see cref="M:NI.Vfs.IFileObject.MoveTo(NI.Vfs.IFileObject)"/>
            </summary>
        </member>
        <member name="P:NI.Vfs.MemoryFile.CopyBufferLength">
            <summary>
            Get or set buffer length used when copying file
            </summary>
        </member>
        <member name="T:NI.Vfs.MemoryFileContent">
            <summary>
            The content of a in-memory file. 
            </summary>
        </member>
        <member name="T:NI.Vfs.MemoryFileSystem">
            <summary>
            In-memory filesystem provider implementation.
            </summary>
        </member>
        <member name="T:NI.Vfs.RegexFileSelector">
            <summary>
            A IFileSelector that selects files by regular expression
            </summary>
        </member>
        <member name="T:NI.Vfs.VfsXmlResolver">
            <summary>
            Resolves external XML resources named by a URI using VFS.
            </summary>
        </member>
        <member name="P:NI.Vfs.VfsXmlResolver.AbsoluteBaseUri">
            <summary>
            Get or set base URI that identifies resources handled by this resolver
            </summary>
            <remarks>By default base URI is "http://vfs/"</remarks>
        </member>
    </members>
</doc>
